<#@ template language="VB" debug="true" hostSpecific="true" #>
<#@ output extension=".vb" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
' ###################################################################
' #  T4-Name	: GenerateCoreModel.tt                              #
' #  Date		: 2021-11-03                                        #
' #  Version	: 1                           (c) MyKey-Soft 2015   #
' ###################################################################
Imports System.Collections.ObjectModel
Imports System.ComponentModel

Imports MYKEY.FxCore
Imports MYKEY.FxCore.Common.Application
Imports MYKEY.FxCore.Common.ApplicationLogging
Imports MYKEY.FxCore.DataAccess
Imports MYKEY.FxCore.Desktop.Domain

Imports MYKEY.FxCore.Common
Imports System.Security.Principal
Imports <#=GetValue("EntityNamespace")#>
Imports System.Data
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure

Partial Class <#=GetValue("ModelName")#>

    Inherits ClassBase
    Implements I<#=GetValue("ModelName")#>
	Implements I<#=GetValue("ModelName")#>_ModelEntryPoints
    Implements IDisposable

#Region "Constructor"

    Public Sub New()

        Me.EntityConnectionData = CreateServerConn(EntityModelDomain)

        Initialize()

    End Sub

    ''' <summary>
    ''' </summary>
    ''' <param name="EntityConnection"></param>
    ''' <remarks>Dieser Konstruktur wird bei den Testklassen verwendet</remarks>
    Public Sub New(EntityConnection As ConnectionStringSqlClientData)

        Me.EntityConnectionData = EntityConnection
        Me.EntityConnectionData.DatabaseModelName = Me.EntityModelDomain
        Me.EntityConnectionData.DatabaseModelAssembly = Me.EntityModelAssembly

        Initialize()

    End Sub

    Public Function EntityModelDomain() As String
        Return "<#=GetValue("EntityModelDomain")#>"
    End Function

    Public Function EntityModelAssembly() As String
        Return "<#=GetValue("EntityModelAssembly")#>"
    End Function

    Private Sub Initialize()

        Try

            ' Einstellungen lesen
            NLOGLOGGER.Debug("=> Initialize Component '<#=GetValue("ModelName")#>'")
            _EntityConnectionString = EntityConnectionData.EntityConnectionString
            NLOGLOGGER.Debug("=> Component '<#=GetValue("ModelName")#>' initialized")

            'NLOGLOGGER.Debug("=> Get Component Settings")
            'Me.Server_Documents_RootDirectory = GetSetting(CommonEnums.Settings.Server_Documents_RootDirectory)

        Catch ex As Exception
            NLOGLOGGER.Fatal("Component '<#=GetValue("ModelName")#>' cannot initialized. Check the database connection first.")

        End Try
    End Sub

#End Region

#Region "IDisposable Support"
    Private disposedValue As Boolean ' So ermitteln Sie überflüssige Aufrufe

    ' IDisposable
    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then

                If _DbCtx IsNot Nothing Then
                    _DbCtx.Dispose()
                End If

            End If

        End If
        Me.disposedValue = True
    End Sub

    ' TODO: Finalize() nur überschreiben, wenn Dispose(ByVal disposing As Boolean) oben über Code zum Freigeben von nicht verwalteten Ressourcen verfügt.
    'Protected Overrides Sub Finalize()
    '    ' Ändern Sie diesen Code nicht. Fügen Sie oben in Dispose(ByVal disposing As Boolean) Bereinigungscode ein.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' Dieser Code wird von Visual Basic hinzugefügt, um das Dispose-Muster richtig zu implementieren.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Ändern Sie diesen Code nicht. Fügen Sie oben in Dispose(ByVal disposing As Boolean) Bereinigungscode ein.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

#Region "Properties"

    Private _EntityConnectionString As String

	 ' Eine lokale Variabel für das lokale Auslesen von Einstellungen
    Private ClientServerSettingsXML As New ServerApplicationSettings

    <ThreadStatic()>
    Private _DbCtx As <#=GetValue("Entities")#>
    Private ReadOnly Property DbCtx As <#=GetValue("Entities")#>
        Get
            Try

                If _DbCtx Is Nothing Then
                    NLOGLOGGER.Debug("Try to create a new DbContext-Object")

                    ' Erzeugen eines DataContext 
                    _DbCtx = New <#=GetValue("Entities")#>(EntityConnectionData.EntityConnectionString)

                    ' Aktivierung des EF6-Loggings
                    If ClientServerSettingsXML.EF6Logging = True Then
                        _DbCtx.Database.Log = Sub(s) NLOGLOGGER.Debug(s)
                    End If

                    _DbCtx.Database.SqlQuery(Of Object)("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;").FirstOrDefault()

                    NLOGLOGGER.Debug("=> successfull")
                End If

            Catch ex As Exception

                Dim _exception As Exception = ex
                While _exception.InnerException IsNot Nothing
                    _exception = _exception.InnerException
                End While

                NLOGLOGGER.Fatal(ex.Message)

            End Try

            Return _DbCtx
        End Get
    End Property

    ''' <summary>
    ''' Diese Eigenschaft speichert einmalig die Werte für den Include bei Eager Loading
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>Wenn der Wer</remarks>
    Private Property Includes As List(Of String)


	    ''' <summary>
    ''' Damit kann geprüft werden, ob Änderungen vorgenommen wurden, die noch nicht gespeichert sind
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks>Die Aussage bezieht sich auf den gesamten Kontext. Möchte man daher Datensatzweise speichern, ist es 
    ''' notwendig, dass vor jedem Wechsel des Datensatzes ein Verwerfen oder ein Speichern staffinden muss</remarks>
    Public ReadOnly Property HasChanges As Boolean
        Get
            Return _DbCtx.ChangeTracker.HasChanges
        End Get
    End Property

#End Region

#Region "Queries"

#Region "DefaultQueries"

    Private ReadOnly Property DefaultQuery<#=GetValue("EntityNamePlural")#> As DbQuery(Of <#=GetValue("EntityNameSingle")#>)
        Get

            Try

                Dim defaultQuery As DbQuery(Of <#=GetValue("EntityNameSingle")#>) = DbCtx.<#=GetValue("EntityNamePlural")#>
	            Dim _defaultQueryResult As DbQuery(Of <#=GetValue("EntityNameSingle")#>)

<# If GetValue("OrderByCount") > 0 Then #>
				' Order-By Einstellungen festlegen
<#		For counter As Integer = 1 To GetValue("OrderByCount") #>
<#			If GetValue("OrderBy" & counter & "Sort") = "" Or (GetValue("OrderBy" & counter & "Sort") = "A") Then #>
				defaultQuery = defaultQuery.OrderBy(Function (entity) entity.<#=GetValue("OrderBy" & counter & "Column") #>) 
<#			Else #>
				defaultQuery = defaultQuery.OrderByDescending(Function (entity) entity.<#=GetValue("OrderBy" & counter & "Column") #>)
<#			End If #>
<#		Next #>
<# End If #>

                ' Nachladen der Includes für Entitäten-Childs
                If Includes IsNot Nothing Then
                    For Each prop As String In Includes
                        defaultQuery = defaultQuery.Include(prop)
                        NLOGLOGGER.Debug("=> Include Entities-Childs for: " & prop)
                    Next
                    Includes = Nothing
                End If

                ' Anpassen der Standardabfrage durch den Benutzer
                _defaultQueryResult = EntryPoint_DefineDefaultQuery(defaultQuery)
                If _defaultQueryResult IsNot Nothing Then
                    defaultQuery = _defaultQueryResult
                End If

                Return defaultQuery

            Catch ex As Exception
                NLOGLOGGER.Fatal(ex.Message)
                Return Nothing
            End Try

        End Get
    End Property


#End Region


    ''' <summary>
    ''' Gibt eine unsortierte Liste der <#=GetValue("EntityNamePluralTranslation")#> aus
    ''' </summary>
    ''' <param name="QParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Get<#=GetValue("EntityNamePlural")#>(Optional QParam As QueryParameters = Nothing) As ObservableCollection(Of <#=GetValue("EntityNameSingle")#>) Implements I<#=GetValue("ModelName")#>.Get<#=GetValue("EntityNamePlural")#>
        Dim server<#=GetValue("EntityNamePlural")#> As DbQuery(Of <#=GetValue("EntityNameSingle")#>)

        NLOGLOGGER.Info("Get List of <#=GetValue("EntityNamePlural")#> ")

        ' Erzeugen eines leeren QueryParameter-Objekts
        If QParam Is Nothing Then
            QParam = New QueryParameters
        End If

        ' Abfrage vorbereiten und ausführen
        With QParam
            Includes = .Includes

            If .ItemsCount > 0 Then
                ' Skip geht nur auf sortierten listen. Daher in Standardreihenfolge
                server<#=GetValue("EntityNamePlural")#> = DefaultQuery<#=GetValue("EntityNamePlural")#>.OrderBy(Function(e) e.Created).Skip(.StartIndex).Take(.ItemsCount)
            Else
                server<#=GetValue("EntityNamePlural")#> = DefaultQuery<#=GetValue("EntityNamePlural")#>
            End If

        End With

        NLOGLOGGER.Debug("Found " & server<#=GetValue("EntityNamePlural")#>.Count & " <#=GetValue("EntityNameSingle")#>/<#=GetValue("EntityNamePlural")#> in database")

        Return New ObservableCollection(Of <#=GetValue("EntityNameSingle")#>)(server<#=GetValue("EntityNamePlural")#>)

    End Function

    ''' <summary>
    ''' Gibt eine unsortierte Liste der <#=GetValue("EntityNamePluralTranslation")#> aus. Als Kriterium wird eine Liste von Guids mitgegeben
    ''' </summary>
    ''' <param name="QParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Get<#=GetValue("EntityNamePlural")#>(<#=GetValue("EntityNameSingle")#>Guids As List(Of Guid), Optional QParam As QueryParameters = Nothing) As ObservableCollection(Of <#=GetValue("EntityNameSingle")#>) Implements I<#=GetValue("ModelName")#>.Get<#=GetValue("EntityNamePlural")#>
        Dim server<#=GetValue("EntityNamePlural")#> As DbQuery(Of <#=GetValue("EntityNameSingle")#>)

        NLOGLOGGER.Info("Get List of <#=GetValue("EntityNamePlural")#> ")

        ' Erzeugen eines leeren QueryParameter-Objekts
        If QParam Is Nothing Then
            QParam = New QueryParameters
        End If

        ' Abfrage vorbereiten und ausführen
        With QParam
            Includes = .Includes

            If .ItemsCount > 0 Then
                ' Skip geht nur auf sortierten listen. Daher in Standardreihenfolge
                server<#=GetValue("EntityNamePlural")#> = DefaultQuery<#=GetValue("EntityNamePlural")#>.OrderBy(Function(e) e.Created).Skip(.StartIndex).Take(.ItemsCount)
            Else
                server<#=GetValue("EntityNamePlural")#> = DefaultQuery<#=GetValue("EntityNamePlural")#>.Where(Function(_<#=GetValue("EntityNameSingle")#>) <#=GetValue("EntityNameSingle")#>Guids.Contains(_<#=GetValue("EntityNameSingle")#>.GUID))
            End If

        End With

        NLOGLOGGER.Debug("Found " & server<#=GetValue("EntityNamePlural")#>.Count & " <#=GetValue("EntityNameSingle")#>/<#=GetValue("EntityNamePlural")#> in database")

        Return New ObservableCollection(Of <#=GetValue("EntityNameSingle")#>)(server<#=GetValue("EntityNamePlural")#>)

    End Function

    ''' <summary>
    ''' Gibt die Informationen für einen <#=GetValue("EntityNameSingleTranslation")#> zurück
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>GUID"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
     Public Function Get<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>GUID As String, Optional QParam As QueryParameters = Nothing) As <#=GetValue("EntityNameSingle")#> Implements I<#=GetValue("ModelName")#>.Get<#=GetValue("EntityNameSingle")#>
        Dim server<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#> = Nothing
        Dim guidConvert As New GuidConverter
        Dim guid As Guid

        Try
            NLOGLOGGER.Info("Get <#=GetValue("EntityNameSingle")#> Informations ")

            guid = guidConvert.ConvertFromString(<#=GetValue("EntityNameSingle")#>GUID)
            NLOGLOGGER.Debug("=> Search for <#=GetValue("EntityNameSingle")#> with GUID '" & <#=GetValue("EntityNameSingle")#>GUID & "'")

            ' Erzeugen eines leeren QueryParameter-Objekts
            If QParam Is Nothing Then
                QParam = New QueryParameters
            End If

            ' Abfrage vorbereiten und ausführen
            With QParam
                Includes = .Includes

                server<#=GetValue("EntityNameSingle")#> = DefaultQuery<#=GetValue("EntityNamePlural")#>.Single(Function(<#=GetValue("EntityNamePlural")#>) <#=GetValue("EntityNamePlural")#>.GUID = guid)
            End With

            NLOGLOGGER.Debug("=> Found <#=GetValue("EntityNameSingle")#> '" & server<#=GetValue("EntityNameSingle")#>.GUID.ToString & "'")
        Catch ex As Exception
            NLOGLOGGER.Fatal(ex.Message)
        End Try

        Return server<#=GetValue("EntityNameSingle")#>
    End Function
<# If System.IO.File.Exists(Path.Combine(Path.GetDirectoryName(Me.Host.ResolvePath("GenerateCoreModel.tt")),"ControlsModelData.xml")) = True Then #>
<#	If GetCtlValue("AlbCount") > 0 Then #>
<#		For Counter As Integer = 1 To GetCtlValue("AlbCount") #>

#Region "AllocationListBox: <#=GetCtlValue("Alb" & Counter & "LinkNamespace").Replace(".","") #>"

<# If GetValue("EntityNameSingle") <> GetCtlValue("Alb" & Counter & "EntityNamespace") Then #>
<#		Dim Found as Boolean = False #>
<#		If Counter > 1 Then #>
<#			For cnt as Integer = 1 To Counter-1 #>
<#				If GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")=GetCtlValue("Alb" & cnt & "EntityNamespace").Replace(".","") Then #>
<#					Found = True #>
<#					Exit For #>
<#				End If #>
<#			Next #>
<#		End If #>
<#		If Found = False Then #>
    ''' <summary>
    ''' Gibt die Informationen für einen <#=GetCtlValue("Alb" & Counter & "LinkCollection")#> zurück
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>GUID"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
     Public Function Get<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>(<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>GUID As String, Optional QParam As QueryParameters = Nothing) As <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#>
        Dim server<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#> As List (Of <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#>) 
        Dim guidConvert As New GuidConverter
        Dim _guid As Guid

        Try
            NLOGLOGGER.Info("Get <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#> Informations ")

            _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>GUID)
            NLOGLOGGER.Debug("=> Search for <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#> with GUID '" & <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>GUID & "'")

            ' Erzeugen eines leeren QueryParameter-Objekts
            If QParam Is Nothing Then
                QParam = New QueryParameters
            End If

            ' Abfrage vorbereiten und ausführen
            With QParam
                Includes = .Includes

                server<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#> = (From <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#> In DbCtx.<#=GetCtlValue("Alb" & Counter & "EntityCollection")#>
                                    Where <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>.GUID = _guid
                                    Select <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>).ToList
            End With

            NLOGLOGGER.Debug("=> Found <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#> '" & server<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>(0).GUID.ToString & "'")
        Catch ex As Exception
			server<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#> = New List (Of <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#>)
            NLOGLOGGER.Fatal(ex.Message)
        End Try

        Return server<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>(0)
    End Function
<#	End If #>
<# End If #>

    ''' <summary>
    ''' Gibt die Informationen für alle <#=GetValue("EntityNamePluralTranslation")#> zurück
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Alb" & Counter & "GroupingProperty")#>"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
     Public Function Get<#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>All<#=GetCtlValue("Alb" & Counter & "ReferenceEntity")#>Members(<#=GetCtlValue("Alb" & Counter & "GroupingProperty")#> As String, Optional QParam As QueryParameters = Nothing) As ObservableCollection(Of <#=GetCtlValue("Alb" & Counter & "LinkNamespace")#>)
        Dim server<#=GetCtlValue("Alb" & Counter & "IncludeCollection").Replace(".","")#> As List(Of <#=GetCtlValue("Alb" & Counter & "LinkNamespace")#>) 
        Dim guidConvert As New GuidConverter
        Dim _guid As Guid

        Try
            NLOGLOGGER.Info("Get <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#> Informations")

            _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Alb" & Counter & "GroupingProperty")#>)
            NLOGLOGGER.Debug("=> Search for <#=GetCtlValue("Alb" & Counter & "EntityNamespace")#> with GUID '" & <#=GetCtlValue("Alb" & Counter & "GroupingProperty")#> & "'")

            ' Erzeugen eines leeren QueryParameter-Objekts
            If QParam Is Nothing Then
                QParam = New QueryParameters
            End If

            ' Abfrage vorbereiten und ausführen
            With QParam
                Includes = .Includes

                server<#=GetCtlValue("Alb" & Counter & "IncludeCollection").Replace(".","")#> = (From <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#> In DbCtx.<#=GetCtlValue("Alb" & Counter & "EntityCollection")#>
                                    From <#=GetCtlValue("Alb" & Counter & "ReferenceEntity")#> In <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>.<#=GetCtlValue("Alb" & Counter & "ReferenceCollection")#>
                                    Where <#=GetCtlValue("Alb" & Counter & "EntityNamespace").Replace(".","")#>.<#=GetCtlValue("Alb" & Counter & "GroupingProperty")#> = _guid
                                    Select <#=GetCtlValue("Alb" & Counter & "ReferenceEntity")#>).ToList

            End With

			NLOGLOGGER.Debug("=> Found " & server<#=GetCtlValue("Alb" & Counter & "IncludeCollection").Replace(".","")#>.Count & " <#=GetCtlValue("Alb" & Counter & "ReferenceCollection")#> in database")

        Catch ex As Exception
			server<#=GetCtlValue("Alb" & Counter & "IncludeCollection").Replace(".","")#> = New List(Of <#=GetCtlValue("Alb" & Counter & "LinkNamespace")#>)
            NLOGLOGGER.Fatal(ex.Message)
        End Try

        Return New ObservableCollection(Of <#=GetCtlValue("Alb" & Counter & "LinkNamespace")#>)(server<#=GetCtlValue("Alb" & Counter & "IncludeCollection").Replace(".","")#>)
    End Function

#End Region
<#		Next #>
<#	End If #>
<# End If #>

#End Region

#Region "Functions"

#Region "Common"

    ''' <summary>
    ''' Erstellt einen neuen leeren Eintrag vom Typ <#=GetValue("EntityNameSingleTranslation")#>
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>Als Ergebnis wird die erzeugte Versammlung-GUID zurückgegeben</remarks>
    Public Function CreateNew<#=GetValue("EntityNameSingle")#>() As ServerResult Implements I<#=GetValue("ModelName")#>.CreateNew<#=GetValue("EntityNameSingle")#>
        Dim crypt As New CryptingHASH
        Dim _result As New ServerResult
		Dim _resultAfterAdd As New ServerResult
        Dim _New<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#>

        Try
            NLOGLOGGER.Info("New <#=GetValue("EntityNameSingle")#> will create in database")

            ' Erzeugt einen gültigen Eintrag, der hinzugefügt werden kann
            _New<#=GetValue("EntityNameSingle")#> = EntryPoint_GenerateValid<#=GetValue("EntityNameSingle")#>Entity()

			' Anpassen der Historieninformationen
			With _New<#=GetValue("EntityNameSingle")#>
                .Created = Now()
                .LastModified = Now()
                .CreatorGUID = Guid.Parse(CurrentUserSettings.UserGUID)
                .ModifierGUID = Guid.Parse(CurrentUserSettings.UserGUID)
			End With

            ' Hinzufügen des Eintrags
            DbCtx.<#=GetValue("EntityNamePlural")#>.Add(_New<#=GetValue("EntityNameSingle")#>)
            DbCtx.SaveChanges()

            NLOGLOGGER.Info("New <#=GetValue("EntityNameSingle")#> is successfull create in database")
            _result.ReturnValue = _New<#=GetValue("EntityNameSingle")#>.GUID.ToString
            NLOGLOGGER.Info("=> <#=GetValue("EntityNameSingle")#>GUID: " & _result.ReturnValue)

			NLOGLOGGER.Debug("=> Execute additional process: AfterAddNew<#=GetValue("EntityNameSingle")#>")
			_resultAfterAdd = EntryPoint_AfterAddNew<#=GetValue("EntityNameSingle")#>(_New<#=GetValue("EntityNameSingle")#>)
			NLOGLOGGER.Debug("=> Finish additional process : AfterAddNew<#=GetValue("EntityNameSingle")#>")

        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception

            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException

                NLOGLOGGER.Fatal(_exception.Message)
                _result.ErrorMessages.Add(_exception.Message)
            End While

        End Try

        Return _result
    End Function


    ''' <summary>
    ''' Erstellt einen neuen <#=GetValue("EntityNameSingleTranslation")#> aus einer <#=GetValue("EntityNameSingleTranslation")#>-Entität
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>Entity"></param>
    ''' <returns>Als Ergebnis wird die erzeugte <#=GetValue("EntityNameSingleTranslation")#>-GUID zurückgegeben</returns>
    ''' <remarks></remarks>
    Public Function CreateNew<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity As <#=GetValue("EntityNameSingle")#>) As ServerResult Implements I<#=GetValue("ModelName")#>.CreateNew<#=GetValue("EntityNameSingle")#>
        Dim crypt As New CryptingHASH
        Dim _result As New ServerResult
		Dim _resultAfterAddNew As New ServerResult
        Dim canAddNew As Boolean
		Dim <#=GetValue("EntityNameSingle")#>EntryPointResult as <#=GetValue("EntityNameSingle")#>

        Try
            NLOGLOGGER.Info("New <#=GetValue("EntityNameSingle")#> will create in database")

           	' Zum Verändern der Entität vor dem Einfügen in die Datenbank
			<#=GetValue("EntityNameSingle")#>EntryPointResult = EntryPoint_BeforeAddNew<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity)
			If <#=GetValue("EntityNameSingle")#>EntryPointResult IsNot Nothing then
				<#=GetValue("EntityNameSingle")#>Entity = <#=GetValue("EntityNameSingle")#>EntryPointResult
			End if

			' Vor dem Einfügen wird geprüft, ob der Eintrag hinzugefügt werden kann
<# If GetValue("CheckUniqueProperty") <> "" #>
			canAddNew = CheckAddNew<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity)
			If canAddNew = True Then
<# End If #>
			canAddNew = EntryPoint_CheckAddNew<#=GetValue("EntityNameSingle")#>(DbCtx, <#=GetValue("EntityNameSingle")#>Entity)
            If canAddNew = Nothing Then
                canAddNew = True
            End If

<# If GetValue("CheckUniqueProperty") <> "" #>
			End If
<# End If #>

            If canAddNew = true Then

				' Anpassen der Historieninformationen
				With <#=GetValue("EntityNameSingle")#>Entity
					.Created = Now()
					.LastModified = Now()
					.CreatorGUID = Guid.Parse(CurrentUserSettings.UserGUID)
					.ModifierGUID = Guid.Parse(CurrentUserSettings.UserGUID)
				End With

                DbCtx.<#=GetValue("EntityNamePlural")#>.Add(<#=GetValue("EntityNameSingle")#>Entity)
                DbCtx.SaveChanges()

                NLOGLOGGER.Info("New <#=GetValue("EntityNameSingle")#> is successfull create in database")
                _result.ReturnValue = <#=GetValue("EntityNameSingle")#>Entity.GUID.ToString
                NLOGLOGGER.Info("=> <#=GetValue("EntityNameSingle")#>GUID: " & _result.ReturnValue)

				NLOGLOGGER.Debug("=> Execute additional process: AfterAddNew<#=GetValue("EntityNameSingle")#>")
				_resultAfterAddNew = EntryPoint_AfterAddNew<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity)
                If _resultAfterAddNew IsNot Nothing Then
                    If _resultAfterAddNew.HasErrors = True Then
                        For Each ErrAfterAddNew As String In _resultAfterAddNew.ErrorMessages
                            _result.ErrorMessages.Add(ErrAfterAddNew)
                        Next
                    End If
                End If
				NLOGLOGGER.Debug("=> Finish additional process : AfterAddNew<#=GetValue("EntityNameSingle")#>")

            Else
                NLOGLOGGER.Error("<#=GetValue("EntityNameSingle")#> cannot added.")
                _result.ErrorMessages.Add("The check of uniquenes is failed. Maybe a Entity with same data is exists")
            End If


        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception

            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException

                NLOGLOGGER.Fatal(_exception.Message)
                _result.ErrorMessages.Add(_exception.Message)
            End While

        End Try

        Return _result

    End Function

	''' <summary>
    ''' Kopieren einer vorhanden <#=GetValue("EntityNameSingleTranslation")#> mit allen Eigenschaften
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>Entity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Copy<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity As <#=GetValue("EntityNameSingle")#>) As ServerResult Implements I<#=GetValue("ModelName")#>.Copy<#=GetValue("EntityNameSingle")#>

        Dim _copy<#=GetValue("EntityNameSingle")#> As New <#=GetValue("EntityNameSingle")#>
		Dim sourceValues As DbPropertyValues
		Dim _result As New ServerResult

		try

			' Create and add clone object to context before setting its values
			DbCtx.<#=GetValue("EntityNamePlural")#>.Add(_copy<#=GetValue("EntityNameSingle")#>)

			' Copy values from source to clone
			sourceValues = DbCtx.Entry(<#=GetValue("EntityNameSingle")#>Entity).CurrentValues
			DbCtx.Entry(_copy<#=GetValue("EntityNameSingle")#>).CurrentValues.SetValues(sourceValues)

			' Anpassen von Eigenschaften der Kopie
			_copy<#=GetValue("EntityNameSingle")#> = EntryPoint_Copy<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity)

			' Anpassen der Historieninformationen
			With _copy<#=GetValue("EntityNameSingle")#>
				.LastModified = Now()
				.ModifierGUID = Guid.Parse(CurrentUserSettings.UserGUID)
			End With

			' Insert clone with changes into database
			DbCtx.SaveChanges()

        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception

            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)
            _result.ErrorMessages.Add(_exception.Message)

        End Try

		Return _result

    End Function

    ''' <summary>
    ''' Die Methode übeträgt die Veränderungen eines Benutzes an die Datenbank
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>Entity">Benutzer-Entität, die veränderte Informationen enthält</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Modify<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity As <#=GetValue("EntityNameSingle")#>) As ServerResult Implements I<#=GetValue("ModelName")#>.Modify<#=GetValue("EntityNameSingle")#>
        Dim _result As New ServerResult
		Dim _resultAfterModify as New ServerResult
		Dim _resultBeforeModify as New ServerResult
		Dim <#=GetValue("EntityNameSingle")#>EntryPointResult as <#=GetValue("EntityNameSingle")#>

        Dim server<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#>

        Try
            NLOGLOGGER.Info("<#=GetValue("EntityNameSingle")#> will modified in database")

            ' Die Artikelinformation wird zunächst aus dem EntityContext-Cache gelesen
            server<#=GetValue("EntityNameSingle")#> = Get<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity.GUID.ToString)

			NLOGLOGGER.Debug("=> Execute additional process: BeforeModify<#=GetValue("EntityNameSingle")#>")
			_resultBeforeModify = EntryPoint_BeforeModify<#=GetValue("EntityNameSingle")#>(server<#=GetValue("EntityNameSingle")#>)
            If _resultBeforeModify IsNot Nothing Then
                If _resultBeforeModify.HasErrors = True Then
                    For Each ErrBeforeModify As String In _resultBeforeModify.ErrorMessages
                        _result.ErrorMessages.Add(ErrBeforeModify)
                    Next
                End If
            End If
			NLOGLOGGER.Debug("=> Finish additional process : BeforeModify<#=GetValue("EntityNameSingle")#>")

            NLOGLOGGER.Debug("=> Execute additional process: ModifyEntityBeforeModify<#=GetValue("EntityNameSingle")#>")
            <#=GetValue("EntityNameSingle")#>EntryPointResult = EntryPoint_ModifyEntityBeforeModify<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity)
			If <#=GetValue("EntityNameSingle")#>EntryPointResult IsNot Nothing then
				<#=GetValue("EntityNameSingle")#>Entity = <#=GetValue("EntityNameSingle")#>EntryPointResult
			End if
            NLOGLOGGER.Debug("=> Finish additional process : ModifyEntityBeforeModify<#=GetValue("EntityNameSingle")#>")

			' Anpassen der Historieninformationen
			With <#=GetValue("EntityNameSingle")#>Entity
				.LastModified = Now()
				.ModifierGUID = Guid.Parse(CurrentUserSettings.UserGUID)
			End With

            DbCtx.Entry(server<#=GetValue("EntityNameSingle")#>).CurrentValues.SetValues(<#=GetValue("EntityNameSingle")#>Entity)
            DbCtx.SaveChanges()

			NLOGLOGGER.Debug("=> Execute additional process: AfterModify<#=GetValue("EntityNameSingle")#>")
			_resultAfterModify = EntryPoint_AfterModify<#=GetValue("EntityNameSingle")#>(server<#=GetValue("EntityNameSingle")#>)
            If _resultAfterModify IsNot Nothing Then
                If _resultAfterModify.HasErrors = True Then
                    For Each ErrAfterModify As String In _resultAfterModify.ErrorMessages
                        _result.ErrorMessages.Add(ErrAfterModify)
                    Next
                End If
            End If
			NLOGLOGGER.Debug("=> Finish additional process : AfterModify<#=GetValue("EntityNameSingle")#>")

            NLOGLOGGER.Debug("<#=GetValue("EntityNameSingle")#> is successfull modiefied in database")

        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception

            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)
            _result.ErrorMessages.Add(_exception.Message)

        End Try

        Return _result

    End Function

	''' <summary>
    ''' Diese Methode löscht einen <#=GetValue("EntityNameSingleTranslation")#> 
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>GUID">Die <#=GetValue("EntityNameSingle")#>GUID des <#=GetValue("EntityNameSingleTranslation")#>, der gelöscht werden soll</param>
    ''' <returns>Wurde der <#=GetValue("EntityNameSingleTranslation")#> gelöscht, dann wird als Ergebniss TRUE zurückgegeben</returns>
    ''' <remarks></remarks>
    Public Function Delete<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>GUID As String, Optional PermanentlyDelete As Boolean = True) As ServerResult Implements I<#=GetValue("ModelName")#>.Delete<#=GetValue("EntityNameSingle")#>

        Dim server<#=GetValue("EntityNamePlural")#> As List(Of <#=GetValue("EntityNameSingle")#>)
        Dim guidConvert As New GuidConverter
        Dim guid As Guid
        Dim _result As New ServerResult
		Dim _resultAfterDelete As New ServerResult

        Try
            NLOGLOGGER.Info("Delete <#=GetValue("EntityNameSingle")#>")

            NLOGLOGGER.Debug("=> Try to find <#=GetValue("EntityNameSingle")#>-id '" & <#=GetValue("EntityNameSingle")#>GUID & "'")
            guid = guidConvert.ConvertFromString(<#=GetValue("EntityNameSingle")#>GUID)
            server<#=GetValue("EntityNamePlural")#> = (From <#=GetValue("EntityNameSingle")#> In DbCtx.<#=GetValue("EntityNamePlural")#> Where <#=GetValue("EntityNameSingle")#>.GUID = guid).ToList

            If server<#=GetValue("EntityNamePlural")#>.Count = 1 Then
                NLOGLOGGER.Debug("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' found")
                If server<#=GetValue("EntityNamePlural")#>(0).CanNotDelete = False Then

                    If PermanentlyDelete = True Then
                        DbCtx.<#=GetValue("EntityNamePlural")#>.Remove(server<#=GetValue("EntityNamePlural")#>(0))
                    Else
						' Anpassen der Historieninformationen
						With server<#=GetValue("EntityNamePlural")#>(0)
							.Deleted = Now()
							.DeleterGUID = Guid.Parse(CurrentUserSettings.UserGUID)
						End With
                    End If
                    DbCtx.SaveChanges()

					NLOGLOGGER.Debug("=> Execute additional process: AfterDelete<#=GetValue("EntityNameSingle")#>")
					_resultAfterDelete = EntryPoint_AfterDelete<#=GetValue("EntityNameSingle")#>(server<#=GetValue("EntityNamePlural")#>(0))
					If _resultAfterDelete IsNot Nothing Then
						If _resultAfterDelete.HasErrors = True Then
							For Each ErrAfterDelete As String In _resultAfterDelete.ErrorMessages
								_result.ErrorMessages.Add(ErrAfterDelete)
							Next
						End If
					End If
					NLOGLOGGER.Debug("=> Finish additional process : AfterDelete<#=GetValue("EntityNameSingle")#>")
			
                    NLOGLOGGER.Info("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' DELETED")

                Else
                    NLOGLOGGER.Debug("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' FAILED to delete")
                End If

            Else
                NLOGLOGGER.Debug("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' not in database")
            End If

        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result

    End Function

	''' <summary>
    ''' Zum vereinfachten löschen von mehreren <#=GetValue("EntityNamePluralTranslation")#>
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNamePlural")#>"></param>
    ''' <param name="PermanentlyDelete"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Delete<#=GetValue("EntityNamePlural")#>(<#=GetValue("EntityNamePlural")#> As <#=GetValue("EntityNameSingle")#>(), Optional PermanentlyDelete As Boolean = True) As ServerResult Implements I<#=GetValue("ModelName")#>.Delete<#=GetValue("EntityNamePlural")#>
        Dim _result As New ServerResult
        Dim _resultAfterDelete As New ServerResult

        Try

            NLOGLOGGER.Info("Delete " & <#=GetValue("EntityNamePlural")#>.Count & " <#=GetValue("EntityNamePlural")#> Collection")

            For Each _<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#> In <#=GetValue("EntityNamePlural")#>
                _resultAfterDelete = Delete<#=GetValue("EntityNameSingle")#>(_<#=GetValue("EntityNameSingle")#>.GUID.ToString, PermanentlyDelete)

                If _resultAfterDelete.HasErrors = True Then
                    For Each msg As String In _resultAfterDelete.ErrorMessages
                        _result.ErrorMessages.Add(msg)
                    Next
                End If
            Next

            If _result.HasErrors = False Then
                NLOGLOGGER.Info("Successfull delete <#=GetValue("EntityNamePlural")#> Collection with no errors")
            Else
                NLOGLOGGER.Error("Delete <#=GetValue("EntityNamePlural")#> Collection with errors")
            End If


        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result
    End Function

	''' <summary>
    ''' Setzt alle Einträge die verändert wurden wieder in den ursprünglichen Zustand zurück
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub RejectChanges()
        For Each entry As Object In _DbCtx.ChangeTracker.Entries()
            Select Case entry.State
                Case EntityState.Modified
                    If True Then
                        entry.CurrentValues.SetValues(entry.OriginalValues)
                        entry.State = EntityState.Unchanged
                        Exit Select
                    End If
                Case EntityState.Deleted
                    If True Then
                        entry.State = EntityState.Unchanged
                        Exit Select
                    End If
                Case EntityState.Added
                    If True Then
                        entry.State = EntityState.Detached
                        Exit Select
                    End If
            End Select
        Next
    End Sub

<# If GetValue("CheckUniqueProperty") <> "" #>
	''' <summary>
    ''' Prüft ob der Eintrag hinzugefüt werden kann
    ''' </summary>
    ''' <param name="<#=GetValue("EntityNameSingle")#>Entity"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function CheckAddNew<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>Entity As <#=GetValue("EntityNameSingle")#>) As Boolean

        Dim isUnique<#=GetValue("EntityNameSingle")#><#=GetValue("CheckUniqueProperty")#> As Boolean

        ' Überprüfen auf Eindeutigkeit, da EF sowas nicht anbietet
        ' Any() stops at the first match and doesn't have to enumerate the entire sequence
        isUnique<#=GetValue("EntityNameSingle")#><#=GetValue("CheckUniqueProperty")#> = Not DbCtx.<#=GetValue("EntityNamePlural")#>.Any(Function(u) u.<#=GetValue("CheckUniqueProperty")#> = <#=GetValue("EntityNameSingle")#>Entity.<#=GetValue("CheckUniqueProperty")#>)

        Return isUnique<#=GetValue("EntityNameSingle")#><#=GetValue("CheckUniqueProperty")#>

    End Function
<#  End if #>
#End Region
<# If System.IO.File.Exists(Path.Combine(Path.GetDirectoryName(Me.Host.ResolvePath("GenerateCoreModel.tt")),"ControlsModelData.xml")) = True Then #>
<#		If GetCtlValue("AlbCount") <> "0" then #>

#Region "AllocationListBoxes"
<#			For counter As Integer = 1 To  GetCtlValue("AlbCount") #>

    ''' <summary>
    ''' Mit dieser Methode fügt man einen <#=GetCtlValue("Alb" & counter & "ReferenceEntityTranslation")#> einer <#=GetValue("EntityNameSingleTranslation")#> hinzu.
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID"><#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-GUID die hinzugefügt werden soll</param>
    ''' <param name="<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID"><#=GetValue("EntityNameSingleTranslation")#>-GUID der Gruppe die den Benutzer enthalten soll</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Add<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>(<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID As String, <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID As String) As ServerResult

        Dim new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#> As <#=GetCtlValue("Alb" & counter & "LinkNamespace")#>
        Dim _result As New ServerResult
        Dim guidConvert As New GuidConverter
        Dim _guid As Guid
		Dim qpara As New QueryParameters

        Try
            NLOGLOGGER.Info("<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> will assign to a <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>")

            new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#> = New <#=GetCtlValue("Alb" & counter & "LinkNamespace")#>
            With new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>
                ' Benötigte Informationen
                _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID)
                .<#=GetCtlValue("Alb" & counter & "ReferenceColumn")#> = _guid
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "ReferenceColumn")#>: " & <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID)

                _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID)
                .<#=GetCtlValue("Alb" & counter & "LinkColumn")#> = _guid
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "LinkColumn")#>: " & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID)
            End With

            DbCtx.<#=GetCtlValue("Alb" & counter & "LinkCollection")#>.Add(new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>)
            DbCtx.SaveChanges()

			' Frisches Einlesen der Entität
			qpara.Includes.Add("<#=GetCtlValue("Alb" & counter & "ReferenceCollection")#>")
			TryCast(DbCtx, IObjectContextAdapter).ObjectContext.Detach(Get<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>(<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID, qpara))
            Dim srv<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#> As <#=GetCtlValue("Alb" & counter & "EntityNamespace")#> = DbCtx.<#=GetCtlValue("Alb" & counter & "EntityCollection")#>.Find(new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>.<#=GetCtlValue("Alb" & counter & "LinkColumn")#>)


            NLOGLOGGER.Info("<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> is successfull assign to <#=GetCtlValue("Alb" & counter & "EntityNamespace")#>")
            _result.ReturnValue = new<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>To<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>.GUID.ToString
            NLOGLOGGER.Info("=> EntryGUID: " & _result.ReturnValue)

        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result
		
    End Function

    ''' <summary>
    ''' Mit dieser Methode entfernt man einen <#=GetCtlValue("Alb" & counter & "ReferenceEntityTranslation")#> aus einer <#=GetValue("EntityNameSingleTranslation")#> .
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID"><#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-GUID die hinzugefügt werden soll</param>
    ''' <param name="<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID"><#=GetValue("EntityNameSingleTranslation")#>-GUID der Gruppe die den Benutzer enthalten soll</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
	Public Function Remove<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>From<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>(<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID As String, <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID As String, Optional PermanentlyDelete As Boolean = True) As ServerResult

        Dim server<#=GetCtlValue("Alb"& counter & "EntityCollection")#> As List(Of <#=GetCtlValue("Alb" & counter & "EntityNamespace")#>)
        Dim guidConvert As New GuidConverter
        Dim guid As Guid
        Dim _result As New ServerResult
        Dim <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>Found As Boolean = False
		Dim qpara As New QueryParameters

        Try
            NLOGLOGGER.Info("Remove <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> From <#=GetCtlValue("Alb" & counter & "EntityNamespace")#>")

            NLOGLOGGER.Debug("=> Try to find <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>-id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "'")
            guid = guidConvert.ConvertFromString(<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID)
            server<#=GetCtlValue("Alb"& counter & "EntityCollection")#> = (From <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#> In DbCtx.<#=GetCtlValue("Alb" & counter & "EntityCollection")#>.Include("<#=GetCtlValue("Alb" & counter & "ReferenceCollection")#>") Where <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>.GUID = guid).ToList

            If server<#=GetCtlValue("Alb"& counter & "EntityCollection")#>.Count = 1 Then
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>-Id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "' found")

                NLOGLOGGER.Debug("=> Search for <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-id '" & <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID & "'")
                For Each entry As <#=GetCtlValue("Alb" & counter & "LinkNamespace")#> In server<#=GetCtlValue("Alb"& counter & "EntityCollection")#>(0).<#=GetCtlValue("Alb" & counter & "ReferenceCollection")#>

                    If entry.<#=GetCtlValue("Alb" & counter & "ReferenceColumn")#>.ToString = <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>GUID Then

                        <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>Found = True

                        If entry.CanNotDelete = False Then

                            If PermanentlyDelete = True Then
                                DbCtx.Entry(entry).State = Entity.EntityState.Deleted
                            Else
                                entry.Deleted = Now
                            End If
                            DbCtx.SaveChanges()

							' Frisches Einlesen der Entität
							qpara.Includes.Add("<#=GetCtlValue("Alb" & counter & "ReferenceCollection")#>")
							TryCast(DbCtx, IObjectContextAdapter).ObjectContext.Detach(Get<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>(<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID, qpara))
							Dim srv<#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#> As <#=GetCtlValue("Alb" & counter & "EntityNamespace")#> = DbCtx.<#=GetCtlValue("Alb" & counter & "EntityCollection")#>.Find(server<#=GetCtlValue("Alb" & counter & "EntityCollection")#>(0).Guid)

                            NLOGLOGGER.Info("=> <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-Id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "' REMOVED")

                        Else
                            NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-Id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "' FAILED to delete")
                            _result.ErrorMessages.Add("<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>  cannot delete - Delete not allowed")
                        End If
                        Exit For
                    End If
                Next
                If <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>Found = False Then
                    NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#>-Id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "' not in UserGroup")
                    _result.ErrorMessages.Add("<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> cannot delete - <#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> not found in Group")
                End If

            Else
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Alb" & counter & "EntityNamespace")#>-Id '" & <#=GetCtlValue("Alb" & counter & "EntityNamespace").Replace(".","")#>GUID & "' not in database")
                _result.ErrorMessages.Add("<#=GetCtlValue("Alb" & counter & "ReferenceEntity")#> cannot delete from <#=GetCtlValue("Alb" & counter & "EntityNamespace")#> - <#=GetCtlValue("Alb" & counter & "EntityNamespace")#> not found in database")
            End If

        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result

    End Function
 
 <#			Next #>
 #End Region
<#		End If #>
<#		If GetCtlValue("AcbCount") <> "0" then #>

#Region "AllocationCheckBoxes"
<#			For counter As Integer = 1 To  GetCtlValue("AcbCount") #>

    ''' <summary>
    ''' Mit dieser Methode fügt man einen <#=GetCtlValue("Acb" & counter & "ReferenceEntityTranslation")#> einer <#=GetValue("EntityNameSingleTranslation")#> hinzu.
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID"><#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-GUID die hinzugefügt werden soll</param>
    ''' <param name="<#=GetValue("EntityNameSingle")#>GUID"><#=GetValue("EntityNameSingleTranslation")#>-GUID der Gruppe die den Benutzer enthalten soll</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Add<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#>(<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID As String, <#=GetValue("EntityNameSingle")#>GUID As String) As ServerResult

        Dim new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#> As <#=GetCtlValue("Acb" & counter & "LinkNamespace")#>
        Dim _result As New ServerResult
        Dim guidConvert As New GuidConverter
        Dim _guid As Guid
		Dim qpara As New QueryParameters

        Try
            NLOGLOGGER.Info("<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> will assign to a <#=GetValue("EntityNameSingle")#>")

            new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#> = New <#=GetCtlValue("Acb" & counter & "LinkNamespace")#>
            With new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#>
                ' Benötigte Informationen
                _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID)
                .<#=GetCtlValue("Acb" & counter & "ReferenceColumn")#> = _guid
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Acb" & counter & "ReferenceColumn")#>: " & <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID)

                _guid = guidConvert.ConvertFromString(<#=GetCtlValue("Acb" & counter & "LinkColumn")#>)
                .<#=GetCtlValue("Acb" & counter & "LinkColumn")#> = _guid
                NLOGLOGGER.Debug("=> <#=GetCtlValue("Acb" & counter & "LinkColumn")#>: " & <#=GetCtlValue("Acb" & counter & "LinkColumn")#>)
            End With

            DbCtx.<#=GetCtlValue("Acb" & counter & "LinkCollection")#>.Add(new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#>)
            DbCtx.SaveChanges()

			' Frisches Einlesen der Entität
			qpara.Includes.Add("<#=GetCtlValue("Acb" & counter & "IncludeCollection")#>")
			TryCast(DbCtx, IObjectContextAdapter).ObjectContext.Detach(Get<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>GUID, qpara))
            Dim srv<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#> = DbCtx.<#=GetCtlValue("Acb" & counter & "EntityCollection")#>.Find(new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#>.<#=GetCtlValue("Acb" & counter & "LinkColumn")#>)


            NLOGLOGGER.Info("<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> is successfull assign to <#=GetValue("EntityNameSingle")#>")
            _result.ReturnValue = new<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>To<#=GetValue("EntityNameSingle")#>.GUID.ToString
            NLOGLOGGER.Info("=> EntryGUID: " & _result.ReturnValue)

        Catch ex As Entity.Validation.DbEntityValidationException

            ' Retrieve the error messages as a list of strings.
            Dim errorMessages = ex.EntityValidationErrors.SelectMany(Function(x) x.ValidationErrors).[Select](Function(x) x.ErrorMessage)

            ' Join the list to a single string.
            Dim fullErrorMessage = String.Join("; ", errorMessages)

            ' Combine the original exception message with the new one.
            Dim exceptionMessage = String.Concat(ex.Message, " Die Validierung ist fehlgeschlagen: ", fullErrorMessage)

            _result.ErrorMessages.Add(exceptionMessage)

        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result
		
    End Function

    ''' <summary>
    ''' Mit dieser Methode entfernt man einen <#=GetCtlValue("Acb" & counter & "ReferenceEntityTranslation")#> aus einer <#=GetValue("EntityNameSingleTranslation")#> .
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID"><#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-GUID die hinzugefügt werden soll</param>
    ''' <param name="<#=GetValue("EntityNameSingle")#>GUID"><#=GetValue("EntityNameSingleTranslation")#>-GUID der Gruppe die den Benutzer enthalten soll</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
	Public Function Remove<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>From<#=GetValue("EntityNameSingle")#>(<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID As String, <#=GetValue("EntityNameSingle")#>GUID As String, Optional PermanentlyDelete As Boolean = True) As ServerResult

        Dim server<#=GetValue("EntityNamePlural")#> As List(Of <#=GetValue("EntityNameSingle")#>)
        Dim guidConvert As New GuidConverter
        Dim guid As Guid
        Dim _result As New ServerResult
        Dim <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>Found As Boolean = False
		Dim qpara As New QueryParameters

        Try
            NLOGLOGGER.Info("Remove <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> From <#=GetValue("EntityNameSingle")#>")

            NLOGLOGGER.Debug("=> Try to find <#=GetValue("EntityNameSingle")#>-id '" & <#=GetValue("EntityNameSingle")#>GUID & "'")
            guid = guidConvert.ConvertFromString(<#=GetValue("EntityNameSingle")#>GUID)
            server<#=GetValue("EntityNamePlural")#> = (From <#=GetValue("EntityNameSingle")#> In DbCtx.<#=GetCtlValue("Acb" & counter & "EntityCollection")#>.Include("<#=GetCtlValue("Acb" & counter & "IncludeCollection")#>") Where <#=GetValue("EntityNameSingle")#>.GUID = guid).ToList

            If server<#=GetValue("EntityNamePlural")#>.Count = 1 Then
                NLOGLOGGER.Debug("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' found")

                NLOGLOGGER.Debug("=> Search for <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-id '" & <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID & "'")
                For Each entry As <#=GetCtlValue("Acb" & counter & "LinkNamespace")#> In server<#=GetValue("EntityNamePlural")#>(0).<#=GetCtlValue("Acb" & counter & "IncludeCollection")#>

                    If entry.<#=GetCtlValue("Acb" & counter & "ReferenceColumn")#>.ToString = <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>GUID Then

                        <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>Found = True

                        If entry.CanNotDelete = False Then

                            If PermanentlyDelete = True Then
                                DbCtx.Entry(entry).State = Entity.EntityState.Deleted
                            Else
                                entry.Deleted = Now
                            End If
                            DbCtx.SaveChanges()

							' Frisches Einlesen der Entität
							qpara.Includes.Add("<#=GetCtlValue("Acb" & counter & "IncludeCollection")#>")
							TryCast(DbCtx, IObjectContextAdapter).ObjectContext.Detach(Get<#=GetValue("EntityNameSingle")#>(<#=GetValue("EntityNameSingle")#>GUID, qpara))
							Dim srv<#=GetValue("EntityNameSingle")#> As <#=GetValue("EntityNameSingle")#> = DbCtx.<#=GetCtlValue("Acb" & counter & "EntityCollection")#>.Find(server<#=GetValue("EntityNamePlural")#>(0).Guid)

                            NLOGLOGGER.Info("=> <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' REMOVED")

                        Else
                            NLOGLOGGER.Debug("=> <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' FAILED to delete")
                            _result.ErrorMessages.Add("<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>  cannot delete - Delete not allowed")
                        End If
                        Exit For
                    End If
                Next
                If <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>Found = False Then
                    NLOGLOGGER.Debug("=> <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' not in UserGroup")
                    _result.ErrorMessages.Add("<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> cannot delete - <#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> not found in Group")
                End If

            Else
                NLOGLOGGER.Debug("=> <#=GetValue("EntityNameSingle")#>-Id '" & <#=GetValue("EntityNameSingle")#>GUID & "' not in database")
                _result.ErrorMessages.Add("<#=GetCtlValue("Acb" & counter & "ReferenceEntity")#> cannot delete from <#=GetValue("EntityNameSingle")#> - <#=GetValue("EntityNameSingle")#> not found in database")
            End If

        Catch ex As Exception
            Dim _exception As Exception = ex
            While _exception.InnerException IsNot Nothing
                _exception = _exception.InnerException
            End While

            NLOGLOGGER.Fatal(_exception.Message)

            _result.ErrorMessages.Add(_exception.Message)
        End Try

        Return _result

    End Function
 
 <#			Next #>
 #End Region

<#		End If #>
<#	If GetCtlValue("AdditionalCount") <> 0 Then #>
#Region "AdditionalInformations"

<#			For counter As Integer = 1 To  GetCtlValue("AdditionalCount") #>
    ''' <summary>
    ''' Mit dieser Methode erhält man alle zusätzlichen Informationen bzw. die zusätzlichen Informationen, die zu einer bestimmten Kategorie gehören
    ''' </summary>
    ''' <param name="<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid"></param>
    ''' <param name="InformationTypeGuid"></param>
    ''' <param name="QParam"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function Get<#=GetValue("EntityNameSingle")#>AdditionalInformations(<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid as string, Optional InformationTypeGuid As String = "", Optional QParam as QueryParameters = Nothing) As ObservableCollection(Of <#=GetCtlValue("Additional" & counter & "Entity")#> )
        Dim server<#=GetCtlValue("Additional" & counter & "Collection")#> As DbQuery(Of <#=GetCtlValue("Additional" & counter & "Entity")#>)
		Dim _InformationTypeGuid as Guid
		Dim _<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid as Guid

        NLOGLOGGER.Info("Get List of <#=GetCtlValue("Additional" & counter & "Collection")#> ")

        ' Erzeugen eines leeren QueryParameter-Objekts
        If QParam Is Nothing Then
            QParam = New QueryParameters
        End If

        ' Abfrage vorbereiten und ausführen
        With QParam
            Includes = .Includes

            If Includes.Count = 0 Then
                Includes.Add("Type")
            End If

            _<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid = Guid.Parse(<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid)

			If InformationTypeGuid.Length > 0 Then 
				_InformationTypeGuid = Guid.Parse(InformationTypeGuid)

				server<#=GetCtlValue("Additional" & counter & "Collection")#> = (From <#=GetCtlValue("Additional" & counter & "Collection")#> In DbCtx.<#=GetCtlValue("Additional" & counter & "Collection")#>
												Where <#=GetCtlValue("Additional" & counter & "Collection")#>.<#=GetCtlValue("Additional" & counter & "ParentField")#> = _<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid
												Where <#=GetCtlValue("Additional" & counter & "Collection")#>.Type.GUID = _InformationTypeGuid
												Select <#=GetCtlValue("Additional" & counter & "Collection")#>)

			Else

				server<#=GetCtlValue("Additional" & counter & "Collection")#> = (From <#=GetCtlValue("Additional" & counter & "Collection")#> In DbCtx.<#=GetCtlValue("Additional" & counter & "Collection")#>
												Where <#=GetCtlValue("Additional" & counter & "Collection")#>.<#=GetCtlValue("Additional" & counter & "ParentField")#> = _<#=GetCtlValue("Additional" & counter & "ParentEntity")#>Guid
												Select <#=GetCtlValue("Additional" & counter & "Collection")#>)

			End If

        End With

        NLOGLOGGER.Debug("Found " & server<#=GetCtlValue("Additional" & counter & "Collection")#>.Count & " <#=GetCtlValue("Additional" & counter & "Entity")#>(s) in database")

        Return New ObservableCollection(Of <#=GetCtlValue("Additional" & counter & "Entity")#>)(server<#=GetCtlValue("Additional" & counter & "Collection")#>)
    End Function

<#		Next #>
#End Region

<#	End If  #>
<# End If #>
#End Region

End Class

<#+

Public Function GetValue(ValueName As String) As String
	
	Dim result As String

	Dim doc As New XmlDocument()

	Dim absolutePath As String = Me.Host.ResolvePath("ModelData.xml")

	doc.Load(absolutePath)

	dim node As XmlNode = doc.SelectSingleNode("ModelData")
		
	result= node.SelectSingleNode(ValueName).InnerText
	
	Return result

End Function

Public Function GetCtlValue(ValueName As String) As String
	
	Dim result As String

	Dim doc As New XmlDocument()

	Dim absolutePath As String = Me.Host.ResolvePath("ControlsModelData.xml")

	doc.Load(absolutePath)

	dim node As XmlNode = doc.SelectSingleNode("ControlsModel")
		
	result= node.SelectSingleNode(ValueName).InnerText
	
	Return result

End Function

#>